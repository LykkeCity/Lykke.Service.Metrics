// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.Metrics.AutorestClient.Models
{
    using Lykke.Service;
    using Lykke.Service.Metrics;
    using Lykke.Service.Metrics.AutorestClient;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AddLogEntryModel
    {
        /// <summary>
        /// Initializes a new instance of the AddLogEntryModel class.
        /// </summary>
        public AddLogEntryModel()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddLogEntryModel class.
        /// </summary>
        /// <param name="id">Log name</param>
        public AddLogEntryModel(string id, IList<KeyValueModel> data)
        {
            Id = id;
            Data = data;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets log name
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Data")]
        public IList<KeyValueModel> Data { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Data == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Data");
            }
            if (Data != null)
            {
                foreach (var element in Data)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
